import pandas as pd
from prophet import Prophet
import json
from collections import defaultdict

def forecast_top_products(csv_path, days_to_forecast=30):
    # 1. –ß—Ç–µ–Ω–∏–µ CSV
    df = pd.read_csv(csv_path, parse_dates=['ds'])

    # 2. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ ID
    grouped = df.groupby('product_id')

    results = []
    product_totals = {}

    # 3. –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É
    for product_id, group in grouped:
        group = group[['ds', 'y']].copy()
        group = group.sort_values('ds')

        if len(group) < 10:
            continue  # –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö

        m = Prophet()
        m.fit(group.rename(columns={'ds': 'ds', 'y': 'y'}))

        future = m.make_future_dataframe(periods=days_to_forecast)
        forecast = m.predict(future)

        total_forecasted = forecast['yhat'][-days_to_forecast:].sum()
        product_totals[product_id] = total_forecasted

        # –ù–∞–π–¥—ë–º –¥–µ–Ω—å —Å –ø–∏–∫–æ–º
        top_days = forecast[['ds', 'yhat']].sort_values('yhat', ascending=False).head(3)

        results.append({
            'product_id': int(product_id),
            'forecast_sum': float(total_forecasted),
            'top_days': top_days.to_dict(orient='records'),
            'full_forecast': forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(days_to_forecast).to_dict(orient='records')
        })

    # 4. –¢–æ–ø 5 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
    top_5 = sorted(results, key=lambda x: x['forecast_sum'], reverse=True)[:5]

    # 5. –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è OpenAI
    analysis_text = generate_text_summary(top_5)

    return {
        'top_5': top_5,
        'text_summary': analysis_text
    }

def generate_text_summary(top_5):
    summary = "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–µ –¢–û–ü-5 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –æ–±—ä—ë–º—É –ø—Ä–æ–¥–∞–∂ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –¥–Ω–∏:\n\n"
    for i, item in enumerate(top_5, 1):
        summary += f"{i}. –ü—Ä–æ–¥—É–∫—Ç ID: {item['product_id']}, –æ–∂–∏–¥–∞–µ–º—ã–π –æ–±—ä–µ–º: {round(item['forecast_sum'], 2)}\n"
        for day in item['top_days']:
            summary += f"   üìÖ –ü–∏–∫: {day['ds'].strftime('%Y-%m-%d')} ‚Äî {round(day['yhat'], 2)} –ø—Ä–æ–¥–∞–∂\n"
    return summary